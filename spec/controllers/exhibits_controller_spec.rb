require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ExhibitsController do

  # This should return the minimal set of attributes required to create a valid
  # Exhibit. As you add validations to Exhibit, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString" } }
  before(:each) { @exhibit = FactoryGirl.create(:exhibit)}
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ExhibitsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let!(:user) { FactoryGirl.create(:user) }

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:user]
    sign_in :user, user # sign_in(scope, resource)
  end

  describe "GET index" do
    it "assigns all exhibits as @exhibits" do

      get :index, {}, valid_session
      assigns(:exhibits).should eq([@exhibit])
    end
  end

  describe "GET show" do
    it "assigns the requested exhibit as @exhibit" do
      exhibit =FactoryGirl.create(:exhibit)
      get :show, {:id => exhibit.to_param}, valid_session
      assigns(:exhibit).should eq(exhibit)
    end
  end

  describe "GET new" do
    it "assigns a new exhibit as @exhibit" do
      get :new, {}, valid_session
      assigns(:exhibit).should be_a_new(Exhibit)
    end
  end

  describe "GET edit" do
    it "assigns the requested exhibit as @exhibit" do
      exhibit = FactoryGirl.create(:exhibit)
      get :edit, {:id => exhibit.to_param}, valid_session
      assigns(:exhibit).should eq(exhibit)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Exhibit" do
        expect {
          post :create, exhibit: FactoryGirl.attributes_for(:exhibit)
        }.to change(Exhibit, :count).by(1)
      end

      it "assigns a newly created exhibit as @exhibit" do
        post :create, exhibit: FactoryGirl.attributes_for(:exhibit)
        assigns(:exhibit).should be_a(Exhibit)
        assigns(:exhibit).should be_persisted
      end

      it "redirects to the created exhibit" do
        post :create, exhibit: FactoryGirl.attributes_for(:exhibit)
        response.should redirect_to (Exhibit.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved exhibit as @exhibit" do
        # Trigger the behavior that occurs when invalid params are submitted
        Exhibit.any_instance.stub(:save).and_return(false)
        post :create, {:exhibit => { "name" => "invalid value" }}, valid_session
        assigns(:exhibit).should be_a_new(Exhibit)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Exhibit.any_instance.stub(:save).and_return(false)
        post :create, {:exhibit => { "name" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end



  describe "DELETE destroy" do
    before :each do
      user.exhibits << @exhibit
    end

    it "deletes the exhibit" do
      expect{
        delete :destroy, id: @exhibit
      }.to change(Exhibit,:count).by(-1)
    end

    it "redirects to the exhibits list" do

      delete :destroy, id: @exhibit
      response.should redirect_to exhibits_url
    end
  end


end
